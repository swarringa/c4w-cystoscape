import aQute.bnd.gradle.Bundle

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // See https://github.com/bndtools/bnd/tree/master/biz.aQute.bnd.gradle
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.3.0'
        // See https://github.com/lburgazzoli/gradle-karaf-plugin
        classpath "gradle.plugin.com.github.lburgazzoli:gradle-karaf-plugin:0.0.49"
    }
}

plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.github.lburgazzoli.karaf' version '0.0.49'
}

apply plugin: 'biz.aQute.bnd.builder'

group 'nl.practicom'
version '0.1'

ext {
    osgiVersion = '4.2.0'
    cytoscapeVersion = '3.7.1'
    slf4jVersion = '1.6.1'
    groovyVersion = '2.4.17'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name ='Cytoscape releases'
        url = 'http://code.cytoscape.org/nexus/content/repositories/releases'
    }
    maven {
        name = 'Cytoscape snapshots'
        url = 'http://code.cytoscape.org/nexus/content/repositories/snapshots/'
    }
    // This is a hack! org.cytoscape:io-impl depends
    // on cytoscape-temp:opencsv-2.1 but this package
    // is not available from the cytoscape repos. Therefore
    // we use a downloaded artifact installed in lib
    flatDir {
        name = "locallib"
        dirs './lib'
    }
}

configurations {
    bundle {
        transitive = false
    }
}

dependencies {
    compile "org.codehaus.groovy:groovy:$groovyVersion"
    compile "org.cytoscape:swing-application-api:$cytoscapeVersion"
    compile "org.cytoscape:app-api:$cytoscapeVersion"
    compile "org.cytoscape:work-api:$cytoscapeVersion"
    compile "org.cytoscape:work-impl:$cytoscapeVersion"
    compile "org.cytoscape:work-swing-api:$cytoscapeVersion"
    compile "org.cytoscape:work-swing-impl:$cytoscapeVersion"
    compile "org.cytoscape:work-headless-impl:$cytoscapeVersion"
    compile "org.cytoscape:service-api:$cytoscapeVersion"
    compile "org.cytoscape:io-api:$cytoscapeVersion"
    compile "org.cytoscape:io-impl:$cytoscapeVersion"
    compile "org.osgi:org.osgi.core:$osgiVersion"
    compile "org.osgi:org.osgi.util.tracker:1.5.2"
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
    compile "nl.practicom:c4w-multidll:0.1"
    compile "nl.practicom:c4w-txa:0.1"
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.28'
    testCompile "junit:junit:4.12"

    // Configuration specifies stuff to be bundled. This is to prevent
    // the inclusion of the cytoscape dependencies
    bundle "nl.practicom:c4w-multidll:$version"
    bundle "nl.practicom:c4w-txa:$version"
    bundle "org.codehaus.groovy:groovy:$groovyVersion"
}

jar {
    // This can be placed in a bnd.bnd file. But it is more convenient
    // to keep everything together here
    bnd (
        'Bundle-Name'           : 'Practicom :: Cytoscape TXA analysis',
        'Bundle-SymbolicName'   : 'nl.practicom.c4w.cytoscape',
        'Bundle-Activator'      : 'nl.practicom.c4w.cytoscape.CyActivator',
        'Export-Package'        : "nl.practicom.c4w.cytoscape.*;ver=${version}" ,
        '-exportcontents'       : 'nl.practicom.c4w.cytoscape.*'

    )
}

/*
    Generates the Karaf feature repository xml file
    See https://karaf.apache.org/manual/latest/provisioning
*/
karaf {
    features {
        // name of the feature 'repository' itself
        name = 'practicom'

        // includes the jar produced by this project
        // Problem: this will use the rootProject.name and generates
        // mvn:nl.practicom/cytoscape-txa-analysis/0.1 as the bundle name.
        includeProject = true

        // include all dependencies from the 'bundle' configuration
        feature {
            name = 'cytoscape-txa-analysis'
            configurations 'bundle'
        }
    }
}

/* Generate the OSGI manifest. See also the bnd instructions on jar above */
task bundle(type: Bundle) {
    from sourceSets.main.output
}

publishing {
    publications {
        /* The bundle jar */
        osgiBundle(MavenPublication){
            from components.java
            // This what we want but it won't work with the
            // karaf feature generator above
            //artifactId 'c4w-cytoscape'
        }
        /* The karaf feature repository */
        osgiFeature(MavenPublication){
            artifact("build/karaf/features/${rootProject.name}-${version}.xml") {
                artifactId 'features'
            }
        }
    }
}

task cleanAll {
    dependsOn gradle.includedBuilds*.task(':clean')
    dependsOn clean
}

